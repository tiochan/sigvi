<?php
/**
 * @author Sebastian Gomez (tiochan@gmail.com)
 * For: Politechnical University of Catalonia (UPC), Spain.
 *
 * @package sigvi
 * @subpackage vulnerabilities
 *
 * Vulnerability definition class
 *
 */


	/**
	 * Class for basic vulnerability structure
	 * Includes CVSS
	 */
	class vuln_gen {

		public $db;
		public $id_source;

		// Generic identification
		public $id_vulnerability;
		public $vuln_id;
		public $publish_date;
		public $modify_date;

		// Vulnerability data:
		public $description;
		public $severity;

		public $CVSS_score;
		public $CVSS_vector;
		public $CVSS_version;
		public $CVSS_base_score;
		public $CVSS_impact_subscore;
		public $CVSS_exploit_subscore;

		public $ar_launch_remotely;
		public $ar_launch_locally;
	//	public $ar_launch_user;
		public $lt_security_protection;
		public $lt_obtain_all_priv;
		public $lt_obtain_some_priv;
		public $lt_confidentiality;
		public $lt_integrity;
		public $lt_availability;
		public $vt_input_validation_error;
		public $vt_boundary_condition_error;
		public $vt_buffer_overflow;
		public $vt_access_validation_error;
		public $vt_exceptional_condition_error;
		public $vt_environment_error;
		public $vt_configuration_error;
		public $vt_race_condition;
		public $vt_other_vulnerability_type;
		public $vuln_software;
		public $links;
		public $other_references;
		public $other;
		public $solution;
		public $updated=0;

		// For reporting...
		public $stored;
		public $report;

		public $cvss;


		public function vuln_gen() {
			$this->stored= false;
			$this->report="";
		}


		public function get_values_from_array($array) {
			$list_vars= get_class_vars(get_class($this));

			foreach ($list_vars as $var) {
				if(key_exists($var,$array)) $this->$var= $array[$var];
			}
		}
	}

	class vulnerability extends vuln_gen {

		/**
		 * vulnerability constructor
		 *
		 * @PARAM dbms $db
		 * @PARAM string $id_source
		 */
		public function vulnerability($db, $id_source) {

			$this->id_source=$id_source;
			$this->db=$db;
			$this->reset();
		}


		/**
		 * Resest vulnerability fields
		 *
		 */
		public function reset() {

			$this->CVSS_score=0;
			$this->CVSS_vector=0;
			$this->CVSS_version=0;
			$this->CVSS_base_score=0;
			$this->CVSS_impact_subscore=0;
			$this->CVSS_exploit_subscore=0;

			$this->ar_launch_remotely=0;
			$this->ar_launch_locally=0;
			$this->lt_security_protection=0;
			$this->lt_obtain_all_priv=0;
			$this->lt_obtain_some_priv=0;
			$this->lt_confidentiality=0;
			$this->lt_integrity=0;
			$this->lt_availability=0;
			$this->vt_input_validation_error=0;
			$this->vt_boundary_condition_error=0;
			$this->vt_buffer_overflow=0;
			$this->vt_access_validation_error=0;
			$this->vt_exceptional_condition_error=0;
			$this->vt_environment_error=0;
			$this->vt_configuration_error=0;
			$this->vt_race_condition=0;
			$this->vt_other_vulnerability_type=0;
			$this->vuln_software= "";
			$this->links= "";
			$this->other_references= "";
			$this->other= "";
			$this->solution= "";
			$this->updated=0;
		}


		/**
		 * echo the value of every field.
		 *
		 */
		public function show_contents() {

			$class_vars = get_object_vars($this);

			foreach ($class_vars as $name => $value) {
				if(!defined("QUIET"))
					if($name != "db") {
				   		echo "<b>$name:</b> " . $value . "<br>\n";
					}
			}
			if(!defined("QUIET"))
				echo "<hr>\n";
		}


		/**
		 * Insert vulnerability into database, if vulnerability identifier doesn't exists
		 *
		 */
		public function store_it() {

			if(!defined("QUIET")) {
				echo $this->vuln_id . ": ";
				echo $this->publish_date . " - " . $this->modify_date . " --> ";
			}

			// Don't accept null CVEs
			if($this->vuln_id == "") {
				if(!defined("QUIET"))
					echo "<font color='red'>Error: NO CVE</font><br>";
				return 0;
			}

			if($this->modify_date=="") {
				$this->modify_date= $this->publish_date;
			}


			// Is there the same CVE and more recent?
			$query="select *
					from vulnerabilities
					where vuln_id='$this->vuln_id' and
						  modify_date >= '$this->modify_date'";

			$res=$this->db->dbms_query($query);
			if($this->db->dbms_check_result($res)) {
				// Yes, then do nothing
				if(!defined("QUIET"))
					echo "<font color='green'>Same or more recent version exists, skipping</font><br>";
				$this->db->dbms_free_result($res);
				return 0;
			}

			// Is there the same CVE with previous modify date?
			$query="select *
					from vulnerabilities
					where vuln_id='$this->vuln_id' and
						  modify_date < '$this->modify_date'";

			$res=$this->db->dbms_query($query);
			if($this->db->dbms_check_result($res)) {

				// Yes, it exists, then update it (the vuln_id is the reference used from alerts).
				$query="update vulnerabilities set
						publish_date='" . $this->publish_date . "',
						modify_date='" . $this->modify_date . "',
						description='" . addslashes($this->description) . "',
						severity='" . $this->severity . "',

						CVSS_score='" . $this->CVSS_score . "',
						CVSS_vector='" . addslashes($this->CVSS_vector) . "',
						CVSS_version='" . $this->CVSS_version . "',
						CVSS_base_score='" . $this->CVSS_base_score . "',
						CVSS_impact_subscore='" . $this->CVSS_impact_subscore . "',
						CVSS_exploit_subscore='" . $this->CVSS_exploit_subscore . "',

						ar_launch_remotely='" . $this->ar_launch_remotely . "',
						ar_launch_locally='" . $this->ar_launch_locally . "',
						lt_security_protection='" . $this->lt_security_protection . "',
						lt_obtain_all_priv='" . $this->lt_obtain_all_priv . "',
						lt_obtain_some_priv='" . $this->lt_obtain_some_priv . "',
						lt_confidentiality='" . $this->lt_confidentiality . "',
						lt_integrity='" . $this->lt_integrity . "',
						lt_availability='" . $this->lt_availability . "',
						vt_input_validation_error='" . $this->vt_input_validation_error . "',
						vt_boundary_condition_error='" . $this->vt_boundary_condition_error . "',
						vt_buffer_overflow='" . $this->vt_buffer_overflow . "',
						vt_access_validation_error='" . $this->vt_access_validation_error . "',
						vt_exceptional_condition_error='" . $this->vt_exceptional_condition_error . "',
						vt_environment_error='" . $this->vt_environment_error . "',
						vt_configuration_error='" . $this->vt_configuration_error . "',
						vt_race_condition='" . $this->vt_race_condition . "',
						vt_other_vulnerability_type='" . $this->vt_other_vulnerability_type . "',
						vuln_software='" . addslashes($this->vuln_software) . "',
						links='" . addslashes($this->links) . "',
						other_references='" . addslashes($this->other_references) . "',
						other='" . addslashes($this->other) . "',
						solution='" . addslashes($this->solution) . "',
						updated='1'
						where vuln_id = '" . $this->vuln_id . "'";

				$this->db->dbms_query($query);
				$row= $this->db->dbms_fetch_row($res);

				// The alerts must be updated so users can be notified
				$query="update alerts set vuln_modified = 1 where vuln_id = '" . $this->vuln_id . "'";
				$this->db->dbms_query($query);

				if(!defined("QUIET"))
					echo "<font color='maroon'>Exists, but older -> previous version updated</font><br>";

			} else {

				// Doesn't exists, then insert new.
				$query= "insert into vulnerabilities(
					id_source,
					vuln_id,
					publish_date,
					modify_date,
					description,
					severity,

					CVSS_score,
					CVSS_vector,
					CVSS_version,
					CVSS_base_score,
					CVSS_impact_subscore,
					CVSS_exploit_subscore,

					ar_launch_remotely,
					ar_launch_locally,
					lt_security_protection,
					lt_obtain_all_priv,
					lt_obtain_some_priv,
					lt_confidentiality,
					lt_integrity,
					lt_availability,
					vt_input_validation_error,
					vt_boundary_condition_error,
					vt_buffer_overflow,
					vt_access_validation_error,
					vt_exceptional_condition_error,
					vt_environment_error,
					vt_configuration_error,
					vt_race_condition,
					vt_other_vulnerability_type,
					vuln_software,
					links,
					other_references,
					other,
					solution)
				 values (
				 	'$this->id_source',
					'$this->vuln_id',
					'$this->publish_date',
					'$this->modify_date',
					'" . addslashes($this->description) . "',
					'$this->severity',

					'$this->CVSS_score',
					'" . addslashes($this->CVSS_vector) . "',
					'$this->CVSS_version',
					'$this->CVSS_base_score',
					'$this->CVSS_impact_subscore',
					'$this->CVSS_exploit_subscore',

					'$this->ar_launch_remotely',
					'$this->ar_launch_locally',
					'$this->lt_security_protection',
					'$this->lt_obtain_all_priv',
					'$this->lt_obtain_some_priv',
					'$this->lt_confidentiality',
					'$this->lt_integrity',
					'$this->lt_availability',
					'$this->vt_input_validation_error',
					'$this->vt_boundary_condition_error',
					'$this->vt_buffer_overflow',
					'$this->vt_access_validation_error',
					'$this->vt_exceptional_condition_error',
					'$this->vt_environment_error',
					'$this->vt_configuration_error',
					'$this->vt_race_condition',
					'$this->vt_other_vulnerability_type',
					'" . addslashes($this->vuln_software) . "',
					'" . addslashes($this->links) . "',
					'" . addslashes($this->other_references) . "',
					'" . addslashes($this->other) . "',
					'" . addslashes($this->solution) . "')";

				$this->db->dbms_query($query);
				if(!defined("QUIET"))
					echo "<font color='blue'>Added</font><br>";
			}

			$this->add_products();
			$this->stored=1;

			return 1;
		}

		/**
		 * This method is used to insert into the products table all the new
		 * products referenced on the vulnerability
		 *
		 */
		private function add_products() {

			if(is_null($this->vuln_software) or (trim($this->vuln_software == ""))) {
				return;
			}

			$soft= explode(";",addslashes(trim($this->vuln_software)));

			foreach ($soft as $prod) {
				if(trim($prod) == "") {
					continue;
				}


				list($vendor, $name, $version)= explode(",", $prod);
				$vendor=trim($vendor);
				$name=trim($name);
				$version=trim($version);

				// Check if this products exists...
				$query="select * from products where vendor = '$vendor' and name='$name' and version='$version'";
				$res= $this->db->dbms_query($query);

				if(!$this->db->dbms_check_result($res)) {

					// Does not exists, so insert it
					$full_name= "$vendor, $name, $version";
					$query="insert into products(vendor, name, version, full_name) values ('$vendor', '$name', '$version', '$full_name')";
					if(!defined("QUIET"))
						echo "<font color=blue> - New product added: $full_name</font><br>";
					$this->db->dbms_query($query);
				}
				$this->db->dbms_free_result($res);
			}
		}
	}

	/**
	 * This class is auxiliar for references.
	 * Passing the vuln_id restore the more relevant information from DB:
	 *
	 */

	class short_vuln_info extends vuln_gen {

		public function short_vuln_info($db, $vuln_id) {

			$this->db= $db;

			$this->vuln_id= $vuln_id;

			$query="select vuln_id as 'vuln_id', " .
				"   description as 'description', " .
				"   severity as 'severity', " .
				"	CVSS_score as 'CVSS_score', " .
				"	CVSS_vector as 'CVSS_vector', " .
				"	CVSS_version as 'CVSS_version', " .
				"	CVSS_base_score as 'CVSS_base_score', " .
				"	CVSS_impact_subscore as 'CVSS_impact_subscore', " .
				"	CVSS_exploit_subscore as 'CVSS_exploit_subscore', " .
				"   vuln_software as 'software', " .
				"   links as 'links', " .
				"   other_references as 'other_references', " .
				"   ar_launch_remotely as 'ar_launch_remotely', " .
				"   ar_launch_locally as 'ar_launch_locally', " .
				"   lt_security_protection as 'lt_security_protection', " .
				"   lt_obtain_all_priv as 'lt_obtain_all_priv', " .
				"   lt_obtain_some_priv as 'lt_obtain_some_priv', " .
				"   lt_confidentiality as 'lt_confidentiality', " .
				"   lt_integrity as 'lt_integrity', " .
				"   lt_availability as 'lt_availability', " .
				"   vt_input_validation_error as 'vt_input_validation_error', " .
				"   vt_boundary_condition_error as 'vt_boundary_condition_error', " .
				"   vt_buffer_overflow as 'vt_buffer_overflow', " .
				"   vt_access_validation_error as 'vt_access_validation_error', " .
				"   vt_exceptional_condition_error as 'vt_exceptional_condition_error', " .
				"   vt_environment_error as 'vt_environment_error', " .
				"   vt_configuration_error as 'vt_configuration_error', " .
				"   vt_race_condition as 'vt_race_condition', " .
				"   vt_other_vulnerability_type as 'vt_other_vulnerability_type', " .
				"   updated as 'updated' " .
				"from vulnerabilities " .
				"where vuln_id = '" . $this->vuln_id . "'";

			$res= $this->db->dbms_query($query);
			if(!$res) {
				return 0;
			}

			$row=$this->db->dbms_fetch_array($res);

			$this->vuln_id= $row["vuln_id"];
			$this->description= $row["description"];
			$this->severity= $row["severity"];
			$this->vuln_software= $row["software"];
			$this->links= $row["links"];
			$this->other_references= $row["other_references"];

			$this->CVSS_score=$row["CVSS_score"];
			$this->CVSS_vector=$row["CVSS_vector"];
			$this->CVSS_version=$row["CVSS_version"];
			$this->CVSS_base_score=$row["CVSS_base_score"];
			$this->CVSS_impact_subscore=$row["CVSS_impact_subscore"];
			$this->CVSS_exploit_subscore=$row["CVSS_exploit_subscore"];

			// Vuln caracteristics
			$this->ar_launch_remotely= $row["ar_launch_remotely"];
			$this->ar_launch_locally= $row["ar_launch_locally"];

			$this->lt_security_protection= $row["lt_security_protection"];
			$this->lt_obtain_all_priv= $row["lt_obtain_all_priv"];
			$this->lt_obtain_some_priv= $row["lt_obtain_some_priv"];
			$this->lt_confidentiality= $row["lt_confidentiality"];
			$this->lt_integrity= $row["lt_integrity"];
			$this->lt_availability= $row["lt_availability"];

			$this->vt_input_validation_error= $row["vt_input_validation_error"];
			$this->vt_boundary_condition_error= $row["vt_boundary_condition_error"];
			$this->vt_buffer_overflow= $row["vt_buffer_overflow"];
			$this->vt_access_validation_error= $row["vt_access_validation_error"];
			$this->vt_exceptional_condition_error= $row["vt_exceptional_condition_error"];
			$this->vt_environment_error= $row["vt_environment_error"];
			$this->vt_configuration_error= $row["vt_configuration_error"];
			$this->vt_race_condition= $row["vt_race_condition"];
			$this->vt_other_vulnerability_type= $row["vt_other_vulnerability_type"];
			$this->updated=$row["updated"];

			$row= $this->db->dbms_fetch_array($res);
			$this->db->dbms_free_result($res);

			if($this->CVSS_vector!="") $this->cvss= new cvss($this->CVSS_version, $this->CVSS_score, $this->CVSS_vector, $this->CVSS_impact_subscore, $this->CVSS_exploit_subscore);
			else $this->cvss= null;
		}

		public function get_vendors_array(&$vendors) {

			if(is_null($this->vuln_software) or (trim($this->vuln_software == ""))) {
				return;
			}

			$soft= explode(";",addslashes(trim($this->vuln_software)));

			foreach ($soft as $prod) {
				if(trim($prod) == "") {
					continue;
				}

				list($vendor, $name, $version)= explode(",", $prod);
				$vendor=trim($vendor);
				$name=trim($name);
				$version=trim($version);

				$vendors[$vendor]="1";
			}
		}
	}

	/**
	 * Returns a short string describing the vulnerability.
	 * Its useful for mail purposes.
	 * If ultrashow is true, then only a short description is returned in <TABLE> format.
	 *
	 * @param $vuln vulnerability
	 * @param $ultra_short bool
	 * @param $tabular bool
	 * @return string
	 */
	function build_body($vuln, $ultra_short=false, $tabular=false) {

		global $MESSAGES;

		$mini_report= build_mini_report($vuln, $tabular);

		$vuln_id= $vuln->updated ? $vuln->vuln_id . " (updated)" : $vuln->vuln_id;
		$link_cve=  "<LINK 'http://nvd.nist.gov/nvd.cfm?cvename=" . $vuln->vuln_id . "'>" . $vuln_id . "</LINK>";
		$link= "<LINK '" . SERVER_URL . HOME . "/admin/vuln_detail.php?detail_vuln_id=" . $vuln->vuln_id . "'>[+]</LINK>";

		$cvss_version= round($vuln->CVSS_version,0);
		$cvss_vector= $vuln->CVSS_vector;
		$cvss_score= $vuln->CVSS_score ? $vuln->CVSS_score : "&nbsp;";

		if($cvss_vector!="" and $cvss_version) {

			$url_cvss= "http://nvd.nist.gov/cvss.cfm?version=$cvss_version&name=" . $vuln->vuln_id . "&vector=$cvss_vector";
			$link_cvss= "<LINK '$url_cvss'>" . $cvss_score . "</LINK>";

		} else {
			$link_cvss= "";
		}


		if($ultra_short) {

			$description= htmlspecialchars($vuln->description);
			$software= htmlspecialchars($vuln->vuln_software);


			if($tabular) {

				$description= strlen($description) > 150 ? substr($description, 0, 145) . " [..]" : $description;
				$software   = strlen($software) > 150 ? substr($software, 0, 145) . " [..]" : $software;


				$body=	"<TR BGCOLOR='" . vuln_get_color($vuln->severity) . "'>" .
						"<TD>" . $link_cve . "</TD>\n" .
						"<TD>" . htmlspecialchars($vuln->severity) . "</TD>\n" .
						"<TD>" . $link_cvss . "</TD>\n" .
						$mini_report . "\n" .
						"<TD>" . $description . "</TD>\n" .
						"<TD>" . $software . "</TD>\n" .
						"<TD>" . $link . "</TD>\n" .
						"</TR>\n";
			} else {
				$cvss_score= $vuln->CVSS_score ? $vuln->CVSS_score : "";

				$body=	"<PARAGRAPH>" .
						"<BOLD>" . $MESSAGES["NOTIFICATION_VULN_ID"] . ":</BOLD> " . $link_cve . ", " .
						"<BOLD>" . $MESSAGES["NOTIFICATION_SEVERITY"] . ":</BOLD> " . $vuln->severity .
						"<BOLD>" . "CVSS score" . ":</BOLD> " . $link_cvss .
						"</PARAGRAPH>" .
						"<PARAGRAPH>" .	$mini_report . "</PARAGRAPH>" .
						"<TITLE_3>" . $MESSAGES["NOTIFICATION_DESCRIPTION"] . "</TITLE_3>" .
						"<PARAGRAPH>" .	$description . "</PARAGRAPH>" .
						"<PARAGRAPH>" .	$software . "</PARAGRAPH>" .
						"<PARAGRAPH>" . $link . "</PARAGRAPH><LINE_BREAK>";
			}

		} else {

			$body="<PARAGRAPH>" .
			"<BOLD>" . $MESSAGES["NOTIFICATION_VULN_ID"] . ":</BOLD> " . $link_cve . ", " .
			"<BOLD>" . $MESSAGES["NOTIFICATION_SEVERITY"] . ":</BOLD> " . $vuln->severity .
			"<BOLD>" . "CVSS score" . ":</BOLD> " . $link_cvss .
			"<LINE_BREAK>" .
			"</PARAGRAPH>" .
			"<TITLE_3>" . $MESSAGES["NOTIFICATION_DESCRIPTION"] . "</TITLE_3>" .
			"<PARAGRAPH>" .	htmlspecialchars($vuln->description) .	"</PARAGRAPH>" .
			"<TITLE_3>" . $MESSAGES["NOTIFICATION_CARACTERISTICS"] . "</TITLE_3>" .
			"<PARAGRAPH>" .	$mini_report . "</PARAGRAPH>" .
			"<TITLE_3>" . $MESSAGES["NOTIFICATION_SOFWARE"] . "</TITLE_3>" .
			"<PARAGRAPH>" .	str_replace("\n", "<LINE_BREAK>", htmlspecialchars($vuln->vuln_software)) . "</PARAGRAPH>";

			$body.="<TITLE_3>" . $MESSAGES["NOTIFICATION_LINK"] . "</TITLE_3>" .
			"<PARAGRAPH>" .	str_replace("\n", "<LINE_BREAK>", htmlspecialchars($vuln->links)) . "</PARAGRAPH>" .
			"<TITLE_3>" .$MESSAGES["NOTIFICATION_OTHER_REFERENCES"] . "</TITLE_3>" .
			"<PARAGRAPH>" . str_replace("\n", "<LINE_BREAK>", htmlspecialchars($vuln->other_references)) . "</PARAGRAPH>" .
			$body.="<TITLE_3>" . $MESSAGES["NOTIFICATION_SOLUTION"] . "</TITLE_3>" .
			"<PARAGRAPH>" .	str_replace("\n", "<LINE_BREAK>", htmlspecialchars($vuln->solution)) . "</PARAGRAPH>";
			$body.="</PARAGRAPH>";
		}

		$vuln->report= $body;
		return $body;
	}

	/**
	 * Returns a short string describing the vulnerability characteristics.
	 *
	 * @param $vuln vulnerability
	 * @param $tabular bool
	 * @return string
	 */
	function build_mini_report($vuln, $tabular=false) {

		global $MESSAGES;

		$mini_report="";

		if($tabular) {

			$properties_to_show= array( "ar_launch_remotely",
										"lt_security_protection",
										"lt_obtain_all_priv",
										"lt_obtain_some_priv",
										"lt_confidentiality",
										"lt_integrity",
										"lt_availability");

			foreach ($properties_to_show as $prop) {
				$aux= $vuln->$prop == 1 ? "X" : "&nbsp;";
				$mini_report.="<TD>$aux</TD>";
			}

		} else {

			list($tit1,$lit1)= explode("<br>",$MESSAGES["VULN_FIELD_AR_LAUNCH_REMOTELY"]);
			$mini_report.= "<ITALIC>$tit1</ITALIC><LINE_BREAK>";
			$val1= $vuln->ar_launch_remotely == 1 ? $MESSAGES["TRUE"] : $MESSAGES["FALSE"];
			$mini_report.= " - $lit1: $val1<LINE_BREAK>";

			list($tit1,$lit1)= explode("<br>",$MESSAGES["VULN_FIELD_SECURITY_PROTECTION"]);
			$mini_report.= "<ITALIC>$tit1</ITALIC><LINE_BREAK>";
			$val1= $vuln->lt_security_protection == 1 ? $MESSAGES["TRUE"] : $MESSAGES["FALSE"];
			$mini_report.= " - $lit1: $val1<LINE_BREAK>";

			list($tit1,$lit1)= explode("<br>",$MESSAGES["VULN_FIELD_OBTAIN_ALL_PRIV"]);
			$val1= $vuln->lt_obtain_all_priv == 1 ? $MESSAGES["TRUE"] : $MESSAGES["FALSE"];
			$mini_report.= " - $lit1: $val1<LINE_BREAK>";

			list($tit1,$lit1)= explode("<br>",$MESSAGES["VULN_FIELD_OBTAIN_SOME_PRIV"]);
			$val1= $vuln->lt_obtain_some_priv == 1 ? $MESSAGES["TRUE"] : $MESSAGES["FALSE"];
			$mini_report.= " - $lit1: $val1<LINE_BREAK>";

			list($tit1,$lit1)= explode("<br>",$MESSAGES["VULN_FIELD_CONFIDENTIALITY"]);
			$val1= $vuln->lt_confidentiality == 1 ? $MESSAGES["TRUE"] : $MESSAGES["FALSE"];
			$mini_report.= " - $lit1: $val1<LINE_BREAK>";

			list($tit1,$lit1)= explode("<br>",$MESSAGES["VULN_FIELD_INTEGRITY"]);
			$val1= $vuln->lt_integrity == 1 ? $MESSAGES["TRUE"] : $MESSAGES["FALSE"];
			$mini_report.= " - $lit1: $val1<LINE_BREAK>";

			list($tit1,$lit1)= explode("<br>",$MESSAGES["VULN_FIELD_AVAILABILITY"]);
			$val1= $vuln->lt_availability == 1 ? $MESSAGES["TRUE"] : $MESSAGES["FALSE"];
			$mini_report.= " - $lit1: $val1<LINE_BREAK>";

		}

		return $mini_report;
	}


	function vuln_get_color($severity) {
		
		include_once MY_INC_DIR . "/classes/fas.class.php";

		$vuln_severity= strtolower($severity);
 
		switch($vuln_severity) {
			case "high":
				return FAS_HIGH_SEVERITY_COLOR;
			case "med":
			case "medium":
				return FAS_MED_SEVERITY_COLOR;
			case "low":
				return FAS_LOW_SEVERITY_COLOR;
			default:
				return "#ffffff";
		}
	}

	function fas_get_color($fas) {
		
		include_once MY_INC_DIR . "/classes/fas.class.php";

		return $fas > FAS_HIGH_SEVERITY ? FAS_HIGH_SEVERITY_COLOR : ($fas > FAS_MED_SEVERITY ? FAS_MED_SEVERITY_COLOR : FAS_LOW_SEVERITY_COLOR);
	}
?>
<?php
/**
 * @author Sebastian Gomez (tiochan@gmail.com)
 * For: Politechnical University of Catalonia (UPC), Spain.
 *
 * @package sigvi
 * @subpackage vulnerability_sources
 *
 * NVD version 1.2 source plugin
 *
 */

/*
	<nvd_xml_version="1.2">
	Updated nvd.nist.gov plugin for parsing nvd-cve 1.2 xml files, Which
	supports CVSS version 2.

	Fields options at: http://nvd.nist.gov/cvss.cfm?version=2&calculator
	CVSs guide: http://www.first.org/cvss/cvss-guide.html

	Main fields in CVE header:


	//////////////////////////////////////////////////////////////////////////
	CVSs Vector


	Base Metrics
	---------------------------------------------------------------------------
	{ CVSs guide: http://www.first.org/cvss/cvss-guide.html#i2.1 }

	Access Vector (AV)         [ Local (L) | Adjacent Network (A) | Network (N) ]
	Access Complexity (AC)     [ High (H) | Medium (M) | Low (L) ]
	Authentication (Au)        [ Multiple (M) | Single (S) | None (N) ]
	Confidentiality Impact (C) [ None (N) | Partial (P) | Complete (C) ]
	Integrity Impact (I)       [ None (N) | Partial (P) | Complete (C) ]
	Availability Impact (A)    [ None (N) | Partial (P) | Complete (C) ]

	Base Metrics
	---------------------------------------------------------------------------
	{ CVSs guide: http://www.first.org/cvss/cvss-guide.html#i2.2 }

	Exploitability (E)         [ Unproven (U) | Proof-of-Concept (POC) | Functional (F) | High (H) | Not Defined (ND) ]
	Remediation Level (RL)     [ Official Fix (OF) | Temporary Fix (TF) | Workaround (W) | Unavailable (U) | Not Defined (ND) ]
	Report Confidence (RC)     [ Unconfirmed (UC) | Uncorroborated (UR) | Confirmed (C) | Not Defined (ND) ]

	Environmental Metrics
	---------------------------------------------------------------------------
	{ CVSs guide: http://www.first.org/cvss/cvss-guide.html#i2.3 }

	Collateral Damage Potential (CDP) [ None (N) | Low (L) | Low-Medium (LM) | Medium-High (MH) | High (H) | Not Defined (ND) ]
	Target Distribution (TD)   [ None (N) | Low (L) | Medium (M) | High (H) | Not Defined (ND) ]
	Security Requirements (CR, IR, AR) [ Low (L) | Medium (M) | High (H) | Not Defined (ND) ]


	Report:
	---------------------------------------------------------------------------
	Metric Value	Description
	Base            AV:[L,A,N]/AC:[H,M,L]/Au:[M,S,N]/C:[N,P,C]/I:[N,P,C]/A:[N,P,C]
	Temporal        E:[U,POC,F,H,ND]/RL:[OF,TF,W,U,ND]/RC:[UC,UR,C,ND]
	Environmental   CDP:[N,L,LM,MH,H,ND]/TD:[N,L,M,H,ND]/CR:[L,M,H,ND]/ IR:[L,M,H,ND]/AR:[L,M,H,ND]


	Example:

		(AV:N/AC:L/Au:N/C:C/I:C/A:C)


	//////////////////////////////////////////////////////////////////////////
	Scoring




	Requires:

	- init.inc.php included


	XML file structure:
*/

	include_once INC_DIR . "/output.inc.php";
	include_once MY_INC_DIR . "/classes/vulnerability.class.php";
	include_once MY_INC_DIR . "/classes/vulnerability_sources.class.php";


	$source_parser_class_name="cve12";

	class cve12 extends source {

		// PUBLIC
		public $URL;

		// PRIVATE
		private $fp;
		private $all_data;
		private $CVE;
		private $debug;
		private $insert;
		private $vendor;
		private $product;
		private $desc_type;
		private $xml_parser;

		private $continue;


		// Examples for URL: "http://nvd.nist.gov/download/nvdcve-2005.xml", "/tmp/nvdcve-2005.xml"
		public function cve12(&$db, $id_source, $param) {

			parent::source($db, $id_source, $param);

			$this->URL=$param;
			$this->global_report="";
		}

		public function src_read() {

			// code for this function is from http://us2.php.net/xml
			$this->xml_parser = xml_parser_create();
			// use case-folding so we are sure to find the tag in $map_array
			xml_parser_set_option($this->xml_parser, XML_OPTION_CASE_FOLDING, true);
			xml_set_object($this->xml_parser, $this);
			xml_set_element_handler($this->xml_parser, "startElement", "endElement");
			xml_set_character_data_handler($this->xml_parser, "characterData");
			if (!($this->fp = fopen($this->URL, "r"))) {
				return 0;
			}

			$this->entries_found=0;
			$this->entries_inserted=0;
			$this->parse_this();

			fclose($this->fp);

			return 1;
		}

		private function startElement($parser, $name, $attrs) {
			//
			// the switch statement should enumerate all of the possible name tags.
			// State is kept using global variables, so that nested tags can
			// access their context.
			//

			$name= strtoupper($name);

			switch ($name) {


				case 'NVD':

					$current_output="<FONT color='blue'>PARSER " . basename(__FILE__) . "</FONT><LINE_BREAK>";
					$current_output.="<FONT color='gray'>Checking XML version, [1.2 expected]: ";

					if(!(isset($attrs["NVD_XML_VERSION"]) and $attrs["NVD_XML_VERSION"]=="1.2")) {

						$this->continue=false;

						$subj="CRITICAL: XML file has not the correct version";
						$msg= "The vulnerabilities will not be used correctly\n";
						$msg.=" URL: " . $this->URL . "\n";
						$msg.=" Plugin: nvd.nist.gov-1.2.";

						$current_output.=$subj;

						include_once INC_DIR . "mail.inc.php";
						send_admins_mail($subj, $subj, $msg, DEFAULT_EMAIL_METHOD);
					} else {
						$current_output.=$attrs["NVD_XML_VERSION"] . "-> Ok<LINE_BREAK>";
						$current_output.="Test mode, showing only 15 rows (max).<LINE_BREAK>";
					}

					if(!CLI_MODE) my_echo($current_output);

					break;

				case 'ENTRY':

					$this->entries_found++;
					$this->vuln[]= new vulnerability($this->db,$this->id_source);
					// $this->vuln[count($this->vuln) - 1]->reset();

					/* Example:
						<entry type="CVE" name="CVE-2007-0061" seq="2007-0061" published="2007-09-21" modified="2007-09-26"
							severity="High"	CVSS_score="10.0" CVSS_vector="(AV:N/AC:L/Au:N/C:C/I:C/A:C)"
							CVSS_version="2.0" CVSS_base_score="10.0" CVSS_impact_subscore="10.0"	CVSS_exploit_subscore="10.0"
						> */
					// get name and publication date
					$this->CVE = $this->validate_CVE($attrs['NAME']);
					$published = $this->validate_date($attrs['PUBLISHED']);
					$modified = isset($attrs['MODIFIED']) ? $this->validate_Date($attrs['MODIFIED']) : $published;

					$this->vuln[count($this->vuln) - 1]->severity= isset($attrs['SEVERITY'])? $attrs['SEVERITY']: "unknown";
					$this->vuln[count($this->vuln) - 1]->vuln_id=$this->CVE;
					$this->vuln[count($this->vuln) - 1]->publish_date=$published;
					$this->vuln[count($this->vuln) - 1]->modify_date=$modified;

					// my_echo("NEW CVE: " . $attrs["NAME"] . "-> " . $this->vuln[count($this->vuln) - 1]->vuln_id . ", " . $this->vuln[count($this->vuln) - 1]->publish_date . ", " . $this->vuln[count($this->vuln) - 1]->severity . "<LINE_BREAK>");
					// other attributes, such as severity, are available
					// see http://nvd.nist.gov/download/nvdcve-xmldoc.cfm

					break;
				case 'DESCRIPT':
					// if there ever was more than one type of description
					// remember which source with a global
					// NVD or CVE
					$this->desc_type = $attrs['SOURCE'];
					// reset data accumulator
					$this->all_data = '';
					// need to wait for end tag to get contents
					break;
				case 'PROD':
					$this->vendor = $attrs['VENDOR'];
					$this->product = $attrs['NAME'];
					if ($this->CVE == '') {
						if(!defined("QUIET"))
							my_echo("error, no CVE number");
						die;
					}
					if ($this->vendor == "") {
						// this happens
						if(!defined("QUIET"))
							my_echo("NVD integrity alert: no vendor for product $this->product, CVE is $this->CVE<LINE_BREAK>");
					}
					if ($this->product == "") {
						if(!defined("QUIET"))
							my_echo("NVD integrity alert: no product, CVE is $this->CVE<LINE_BREAK>");
					}
					break;
				case 'LOSS_TYPES':
					break;
				case 'VULNS_TYPES':
					break;
				case 'REF':
					if($this->vuln[count($this->vuln) - 1]->links!="") {
						$this->vuln[count($this->vuln) - 1]->links.="\n";
					}

					$this->vuln[count($this->vuln) - 1]->links.= $attrs['SOURCE'] . " AT " . $attrs['URL'];
					$this->all_data = '';
					// need to wait for end tag to get contents
					break;
				case 'VERS':
					if($this->vuln[count($this->vuln) - 1]->vuln_software!="") {
						$this->vuln[count($this->vuln) - 1]->vuln_software.="\n";
					}
					$this->vuln[count($this->vuln) - 1]->vuln_software.="$this->vendor, $this->product, " . $attrs['NUM'] . "; ";
					break;
				case '':
					break;
			}
		}


		private function endElement($parser, $name) {

			$name= strtoupper($name);

			switch ($name) {
				case 'ENTRY':

					// New entry found, store last... if exists
					if($this->entries_found > 0) {
						if(!$this->test_mode) {
							if($this->vuln[count($this->vuln) - 1]->store_it()) {
								//$this->vuln[count($this->vuln) - 1]->build_body(true);
								$this->entries_inserted++;
							}
						} else {
							$this->vuln[count($this->vuln) - 1]->show_contents();
						}
					}

					$this->CVE = '';
					break;

				case 'DESCRIPT':
					if ($this->CVE == '') {
						if(!defined("QUIET"))
							my_echo("error, no CVE number");
						die;
					}
					$this->vuln[count($this->vuln) - 1]->description=$this->all_data;

					// reset data accumulator
					$this->all_data = '';
					break;

				case 'REF':
					if($this->vuln[count($this->vuln) - 1]->links!="")
						$this->vuln[count($this->vuln) - 1]->links.="\n";

					$this->vuln[count($this->vuln) - 1]->links.= $this->all_data;

					// reset data accumulator
					$this->all_data = '';
					break;
				case 'AVAIL':
					$this->vuln[count($this->vuln) - 1]->lt_availability=1;
					break;
				case 'CONF':
					$this->vuln[count($this->vuln) - 1]->lt_confidentiality=1;
					break;
				case 'INT':
					$this->vuln[count($this->vuln) - 1]->lt_integrity=1;
					break;
				case 'SEC_PROT':
					$this->vuln[count($this->vuln) - 1]->lt_security_protection=1;
					break;
				case 'ACCESS':
					$this->vuln[count($this->vuln) - 1]->vt_access_validation_error=1;
					break;
				case 'INPUT':
					$this->vuln[count($this->vuln) - 1]->vt_input_validation_error=1;
					break;
				case 'DESIGN':
					$this->vuln[count($this->vuln) - 1]->vt_other_vulnerability_type=1;
					break;
				case 'EXCEPTION':
					$this->vuln[count($this->vuln) - 1]->vt_exceptional_condition_error=1;
					break;
				case 'ENV':
					$this->vuln[count($this->vuln) - 1]->vt_environment_error=1;
					break;
				case 'CONFIG':
					$this->vuln[count($this->vuln) - 1]->vt_configuration_error=1;
					break;
				case 'RACE':
					$this->vuln[count($this->vuln) - 1]->vt_race_condition=1;
					break;
				case 'OTHER':
					$this->vuln[count($this->vuln) - 1]->vt_other_vulnerability_type=1;
					break;
				case 'USER_INIT':
					//$this->vuln[count($this->vuln) - 1]->ar_launch_user=1;
					break;
				case 'REMOTE':
					$this->vuln[count($this->vuln) - 1]->ar_launch_remotely=1;
					break;
				case 'LOCAL':
					$this->vuln[count($this->vuln) - 1]->ar_launch_locally=1;
					break;
				case 'NETWORK':
					$this->vuln[count($this->vuln) - 1]->ar_launch_remotely= 1;
					break;
				case 'LOCAL_NETWORK':
					$this->vuln[count($this->vuln) - 1]->ar_launch_remotely= 1;
					break;
				case '':
				break;
			}
		}

		private function characterData($parser, $data) {
			// concatenate due to bug with & according to a user entry in PHP docs
			// entry by sam at cwa dot co dot nz, Sept 2000
			// This issue might have been fixed later.  The fix can't hurt though.
			$this->all_data .= $data;
		}

		private function parse_this() {
			$counter=0;

			while ($data = fread($this->fp, 4096)) {
				{
					if (!xml_parse($this->xml_parser, $data, feof($this->fp))) {
						die(sprintf("XML error: %s at line %d",	xml_error_string(xml_get_error_code($this->xml_parser)), xml_get_current_line_number($this->xml_parser)));
					}
				}
				$counter++;

				// For test mode only do it for 15 iterations.
				if($this->test_mode and ($counter==15)){
					break;
				}
			}
			xml_parser_free($this->xml_parser);
		}

		private function validate_CVE($input) {
			// expecting something like CAN-2004-0002
			// NVD documentation suggests this reg exp,
			// (http://nvd.nist.gov/download/nvdcve-xmldoc.cfm)
			// (CAN|CVE)-/d/d/d/d-/d/d/d/d
			// which doesn't work.  See below
			if (preg_match('/(CAN|CVE)-\d\d\d\d-\d\d\d\d/', $input, $matches)) {
				return $matches[0];
			} else {
				// if there was an error (false) or if 0 matches
				die ("Invalid CVE number encountered: $input");
			}
		}

		private function validate_Date($input) {
			// expecting something like 2004-03-03
			if (preg_match('/\d\d\d\d-\d\d-\d\d/', $input, $matches)) {
				return $matches[0];
			} else {
				// if there was an error (false) or if 0 matches
				die ("Invalid date encountered: $input");
			}
		}

	}
/*
-------------------------------------------------------------------------------
CVE XML File header:
-------------------------------------------------------------------------------

<nvd
	xmlns="http://nvd.nist.gov/feeds/cve/1.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://nvd.nist.gov/feeds/cve/1.2 http://nvd.nist.gov/schema/nvdcve.xsd"
	nvd_xml_version="1.2"			This is important! Need the same version to ensure the correct parsing.
	pub_date="2007-09-27"
>

-------------------------------------------------------------------------------
VULN SAMPLE:
-------------------------------------------------------------------------------

<entry
	type="CVE"
	name="CVE-2007-0061"
	seq="2007-0061"
	published="2007-09-21"
	modified="2007-09-26"
	severity="High"
	CVSS_score="10.0"
	CVSS_vector="(AV:N/AC:L/Au:N/C:C/I:C/A:C)"
	CVSS_version="2.0"
	CVSS_base_score="10.0"
	CVSS_impact_subscore="10.0"
	CVSS_exploit_subscore="10.0"
>
	<desc>
		<descript source="cve">
			The DHCP server in EMC VMware Workstation before 5.5.5 Build 56455 and 6.x before 6.0.1 Build 55017, Player before 1.0.5 Build 56455 and Player 2 before 2.0.1 Build 55017, ACE before 1.0.3 Build 54075 and ACE 2 before 2.0.1 Build 55017, and Server before 1.0.4 Build 56528 allows remote attackers to execute arbitrary code via a malformed packet that triggers &quot;corrupt stack memory.&quot;
		</descript>
	</desc>
	<loss_types>
		<avail/>
		<conf/>
		<int/>
		<sec_prot admin="1"/>
	</loss_types>
	<range>
		<network/>
	</range>
	<refs>
		<ref source="ISS" url="http://www.iss.net/threats/275.html" adv="1">
			20070919 VMWare DHCP Server Remote Code Execution Vulnerabilities
		</ref>
		<ref source="" url="http://www.vmware.com/support/ace/doc/releasenotes_ace.html" patch="1"/>
		<ref source="" url="http://www.vmware.com/support/ace2/doc/releasenotes_ace2.html" patch="1"/>
		<ref source="" url="http://www.vmware.com/support/player/doc/releasenotes_player.html" patch="1"/>
		<ref source="" url="http://www.vmware.com/support/player2/doc/releasenotes_player2.html" patch="1"/>
		<ref source="" url="http://www.vmware.com/support/server/doc/releasenotes_server.html" patch="1"/>
		<ref source="" url="http://www.vmware.com/support/ws55/doc/releasenotes_ws55.html" patch="1"/>
		<ref source="" url="http://www.vmware.com/support/ws6/doc/releasenotes_ws6.html" patch="1"/>
		<ref source="BID" url="http://www.securityfocus.com/bid/25729">
			25729
		</ref>
		<ref source="XF" url="http://xforce.iss.net/xforce/xfdb/33101" patch="1">
			dhcp-malformed-packet-bo(33101)
		</ref>
	</refs>
	<vuln_soft>
		<prod name="VMWare Player" vendor="VMWare">
			<vers num="1.0" prev="1"/>
			<vers num="1.0.5.56455" prev="1"/>
		</prod>
		<prod name="ACE" vendor="VMWare">
			<vers num="1.0"/>
			<vers num="1.0.3 Build 54075" prev="1"/>
		</prod>
		<prod name="ACE 2" vendor="VMWare">
			<vers num="2.0.1.55017" prev="1"/>
		</prod>
		<prod name="VMware Server" vendor="VMWare">
			<vers num="1.0.4.56528" prev="1"/>
		</prod>
		<prod name="VMWare Player 2" vendor="VMWare">
			<vers num="2.0.1.55017" prev="1"/>
		</prod>
		<prod name="VMWare Workstation" vendor="VMWare">
			<vers num="5.5" prev="1"/>
			<vers num="5.5.1" prev="1"/>
			<vers num="5.5.3" prev="1"/>
			<vers num="5.5.3.34685" prev="1"/>
			<vers num="5.5.5.56455" prev="1"/>
			<vers num="6.0" prev="1"/>
			<vers num="6.0.1.55017" prev="1"/>
		</prod>
	</vuln_soft>
</entry>
*/
